import os
from typing import Optional

import lightning as L
import streamlit as st
from lightning.frontend.stream_lit import StreamlitFrontend
from lightning.storage import Drive
from lightning.utilities.state import AppState

from lightning_rl import ROOT_DIR


def just_wait_gif():
    _left, mid, _right = st.columns([0.25, 5, 0.25])
    mid.image(os.path.join(ROOT_DIR, "..", "images", "just_wait.gif"), use_column_width=True)


def render_gif(state: Optional[AppState] = None) -> None:
    if (
        state is not None
        and state.rendering_path is not None
        and len(state.lightning_rl_drive.list(state.rendering_path)) > 0
    ):
        state.lightning_rl_drive.get(state.rendering_path, overwrite=True)
        rendering_path = state.rendering_path
        gifs = sorted(os.listdir(rendering_path), key=lambda x: int(x.split("_")[1].split(".")[0]), reverse=True)
        if len(gifs) > 0 and os.path.exists(os.path.join(rendering_path, gifs[0])):
            st.write(
                "In here you can see how the agent behaves in the real world! The GIF is generated by the learned agent with respect to the greedy policy, i.e. the one that takes the most probable action (to maximize the instant reward) given the observed state."
            )
            if state.show_gifs_grid:
                for i in range(0, max(len(gifs) // 2 + len(gifs) % 2 == 0, 2)):
                    cols = st.columns(2)
                    for j in range(len(cols)):
                        if i * 2 + j < len(gifs):
                            cols[j].image(
                                os.path.join(rendering_path, gifs[i * 2 + j]), width=300, use_column_width=True
                            )
            else:
                st.image(os.path.join(rendering_path, gifs[0]), width=300, use_column_width=True)
        else:
            just_wait_gif()
    else:
        just_wait_gif()


class GIFRender(L.LightningFlow):
    """Simple StreamLit frontend. It shows the GIF generated by the tester.

    Args:
        rendering_path (Path): Path to the directory where the GIFs are stored.
    """

    def __init__(self, lightning_rl_drive: Drive, show_gifs_grid: bool = False):
        super().__init__()
        self.show_gifs_grid = show_gifs_grid
        self.rendering_path = None
        self.lightning_rl_drive = lightning_rl_drive

    def configure_layout(self):
        return StreamlitFrontend(render_fn=render_gif)


if __name__ == "__main__":
    render_gif()
